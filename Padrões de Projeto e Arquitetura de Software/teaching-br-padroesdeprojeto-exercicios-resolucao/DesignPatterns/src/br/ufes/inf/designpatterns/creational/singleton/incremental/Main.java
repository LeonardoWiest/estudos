package br.ufes.inf.designpatterns.creational.singleton.incremental;/** * Classe incremental, teste do padrão Singleton. *  * @author Vitor E. Silva Souza (vitorsouza@gmail.com) * @version 2005.07.03 */class Incremental {	/** Objeto que funciona como semáforo para garantir o singleton. */	private static final Object lock = new Object();	/** Instância única da classe incremental. */	private static Incremental singletonInstance;	/** Contador. */	private static int count = 0;	/** Número obtido do contador. */	private int numero;	/** Construtor privado: use getInstance(). */	private Incremental() {		numero = ++count;	}	/** Obtém a instância singleton da classe Incremental. */	public static Incremental getInstance() {		// Bloco synchronized para evitar duas threads construirem instâncias.		synchronized (lock) {			if (singletonInstance == null)				singletonInstance = new Incremental();		}		// Retorna a instância única.		return singletonInstance;	}	/** @see java.lang.Object#toString() */	public String toString() {		return "Incremental " + numero;	}}/** * Classe executável. *  * @author Vitor E. Silva Souza (vitorsouza@gmail.com) * @version 2005.07.03 */public class Main {	/** Método principal - executável. */	public static void main(String[] args) {		for (int i = 0; i < 10; i++) {			Incremental inc = Incremental.getInstance();			System.out.println(inc);		}	}}